Sve razlike izmedju klasnih i funkcionalnih komponenti u reactu:
Kao sto znamo funkcionalne komponente su trenutni nacin na koji pravimo komponente, od njihovog predstavljanja 2019e godine sa react verzijom 16.8. S druge strane klasne komponente su tu jako dugo. Od verzije 0.13 iz 2015e godine. Tehnicki gledano react je oduvek imao funkcionalne komponente ali bez hook-ova. Sto je cinilo funkcionalne komponente prakticno neupotrebljivim, jer nisu mogle da imaju ni svoj state. Da bi kreirali funkcionalnu komponentu prakticno mozemo da koristimo bilo koji tip funkcije: funkcijske deklaracije, funkcijske izraze, arrow funkcije. Dok u klasnim komponentama moramo da ih pravimo kako samo ime i kaze sa es6 klasama naravno uz extendovanje React.Component. Kada koristimo klase mi zapravo koristimo principe iz objektno orijentisanog programiranja. Kao sto je koriscenje this kljucne reci da iscitamo dolazece propsove ili da definisemo lokalni state. S druge strane od kad postoje hookovi u reactu (2019) definisanje state ili iscitavanje propsa je mnogo lakse. Sve sto treba je da isctiamo props objekat iz funkcijskog parametra. Dok za definisanje state-a koristimo useState hook. Vrv najveca razlika izmedju ova dva stila pisanja react komponenti jeste u tome kako regulisu efekte ili ti lifecycle. U klasnim komponentama imamo specijalne metode koje su definisane od strane reacta da bi izvrsavali kod u razlicitom vremenu lifecycle jedne komponente. Zato se drugacije nazivaju lifecycle metode. U funkcionalnim komponentama koristimo jednostavno useEffect hook. Takodje jos neke od manjih razlika jesu event handleri. U funkcionalnim komponentama definisemo event handlere prosto u telu komponente dok u klasnim komponentama moramo da definisemo novu klasnu metodu za svaki event handler pojedinacno. Takodje jos jedna razlika jeste jsx i kako ga vracamo iz komponente. U funkcionalnim komponentama prosto vracamo JSX iz nase komponente (funkcije). Dok nam u klasnim komponentama treba posebna render() metoda iz koje vracamo JSX. Sve ovo cini funkcionlne komponente jako laksim za koriscenje posto zahtevaju jako manje boilerplate koda i omogucavaju cistiji kod. useEffect hook kombinuje sve lifecycle metode iz klasnih komponenti u jednom mestu, dok kod klasa ovo moze da bude dosta tesko za pracenje. Jos jedan od benefita funkcionalnih komponenti jeste sto ne moramo da koristimo komplikovanu this kljucnu rec. Mozda jedina prednost klasnih komponenti jeste sto se vrv bolje razumeju life cycle metode zbog njihovih naziva: componentDidMount, componentWillUnmount...